// Mocks generated by Mockito 5.3.2 from annotations
// in cosmicview/test/_helpers/_mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cosmicview/src/core/enums/dio_client_enum.dart' as _i5;
import 'package:cosmicview/src/core/network/dio_client.dart' as _i4;
import 'package:cosmicview/src/core/network/network_exception.dart' as _i10;
import 'package:cosmicview/src/data/datasources/remote/apod/apod_remote_data_source.dart'
    as _i6;
import 'package:cosmicview/src/data/datasources/remote/nasa_image/nasa_image_remote_data_source.dart'
    as _i13;
import 'package:cosmicview/src/data/models/apod_model/apod_model.dart' as _i8;
import 'package:cosmicview/src/data/models/nasa_image_model/nasa_image_model.dart'
    as _i3;
import 'package:cosmicview/src/domain/entities/apod.dart' as _i11;
import 'package:cosmicview/src/domain/entities/nasa_image/nasa_image.dart'
    as _i15;
import 'package:cosmicview/src/domain/repositories/apod_repository.dart' as _i9;
import 'package:cosmicview/src/domain/repositories/nasa_image_repository.dart'
    as _i14;
import 'package:cosmicview/src/domain/usecases/apod_usecase.dart' as _i12;
import 'package:cosmicview/src/domain/usecases/nasa_image_usecase.dart' as _i16;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNasaImageModel_1 extends _i1.SmartFake
    implements _i3.NasaImageModel {
  _FakeNasaImageModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [APODRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPODRemoteDataSource<T extends _i4.BaseClient<_i5.ClientEnum>>
    extends _i1.Mock implements _i6.APODRemoteDataSource<T> {
  MockAPODRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i8.APODModel>> fetchAPODData({required int? count}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAPODData,
          [],
          {#count: count},
        ),
        returnValue: _i7.Future<List<_i8.APODModel>>.value(<_i8.APODModel>[]),
      ) as _i7.Future<List<_i8.APODModel>>);
}

/// A class which mocks [APODRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPODRepository extends _i1.Mock implements _i9.APODRepository {
  MockAPODRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i10.NetworkExceptions, List<_i11.APOD>>> fetchAPODData(
          {required int? count}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAPODData,
          [],
          {#count: count},
        ),
        returnValue: _i7.Future<
                _i2.Either<_i10.NetworkExceptions, List<_i11.APOD>>>.value(
            _FakeEither_0<_i10.NetworkExceptions, List<_i11.APOD>>(
          this,
          Invocation.method(
            #fetchAPODData,
            [],
            {#count: count},
          ),
        )),
      ) as _i7.Future<_i2.Either<_i10.NetworkExceptions, List<_i11.APOD>>>);
}

/// A class which mocks [APODUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPODUsecase extends _i1.Mock implements _i12.APODUsecase {
  MockAPODUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i10.NetworkExceptions, List<_i11.APOD>>> fetchAPODData(
          {required int? count}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAPODData,
          [],
          {#count: count},
        ),
        returnValue: _i7.Future<
                _i2.Either<_i10.NetworkExceptions, List<_i11.APOD>>>.value(
            _FakeEither_0<_i10.NetworkExceptions, List<_i11.APOD>>(
          this,
          Invocation.method(
            #fetchAPODData,
            [],
            {#count: count},
          ),
        )),
      ) as _i7.Future<_i2.Either<_i10.NetworkExceptions, List<_i11.APOD>>>);
}

/// A class which mocks [NasaImageRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaImageRemoteDataSource<T extends _i4.BaseClient<_i5.ClientEnum>>
    extends _i1.Mock implements _i13.NasaImageRemoteDataSource<T> {
  MockNasaImageRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.NasaImageModel> fetchNasaImageData({
    required int? count,
    String? searchString,
    String? location,
    String? keywords,
    String? startYear,
    String? endYear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNasaImageData,
          [],
          {
            #count: count,
            #searchString: searchString,
            #location: location,
            #keywords: keywords,
            #startYear: startYear,
            #endYear: endYear,
          },
        ),
        returnValue: _i7.Future<_i3.NasaImageModel>.value(_FakeNasaImageModel_1(
          this,
          Invocation.method(
            #fetchNasaImageData,
            [],
            {
              #count: count,
              #searchString: searchString,
              #location: location,
              #keywords: keywords,
              #startYear: startYear,
              #endYear: endYear,
            },
          ),
        )),
      ) as _i7.Future<_i3.NasaImageModel>);
}

/// A class which mocks [NasaImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaImageRepository extends _i1.Mock
    implements _i14.NasaImageRepository {
  MockNasaImageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i10.NetworkExceptions, _i15.NasaImage>>
      fetchNasaImageData({
    required int? count,
    String? searchString,
    String? location,
    String? keywords,
    String? startYear,
    String? endYear,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchNasaImageData,
              [],
              {
                #count: count,
                #searchString: searchString,
                #location: location,
                #keywords: keywords,
                #startYear: startYear,
                #endYear: endYear,
              },
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i10.NetworkExceptions, _i15.NasaImage>>.value(
                _FakeEither_0<_i10.NetworkExceptions, _i15.NasaImage>(
              this,
              Invocation.method(
                #fetchNasaImageData,
                [],
                {
                  #count: count,
                  #searchString: searchString,
                  #location: location,
                  #keywords: keywords,
                  #startYear: startYear,
                  #endYear: endYear,
                },
              ),
            )),
          ) as _i7.Future<_i2.Either<_i10.NetworkExceptions, _i15.NasaImage>>);
}

/// A class which mocks [NasaImageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaImageUsecase extends _i1.Mock implements _i16.NasaImageUsecase {
  MockNasaImageUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i10.NetworkExceptions, _i15.NasaImage>>
      fetchNasaImageData({
    required int? count,
    String? searchString,
    String? location,
    String? keywords,
    String? startYear,
    String? endYear,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchNasaImageData,
              [],
              {
                #count: count,
                #searchString: searchString,
                #location: location,
                #keywords: keywords,
                #startYear: startYear,
                #endYear: endYear,
              },
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i10.NetworkExceptions, _i15.NasaImage>>.value(
                _FakeEither_0<_i10.NetworkExceptions, _i15.NasaImage>(
              this,
              Invocation.method(
                #fetchNasaImageData,
                [],
                {
                  #count: count,
                  #searchString: searchString,
                  #location: location,
                  #keywords: keywords,
                  #startYear: startYear,
                  #endYear: endYear,
                },
              ),
            )),
          ) as _i7.Future<_i2.Either<_i10.NetworkExceptions, _i15.NasaImage>>);
}
